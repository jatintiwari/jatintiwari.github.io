import{S as n,i as a,s,v as t,j as e,e as o,a as p,w as c,b as i,d as l,q as r,m as u,n as k,x as d,g as h}from"./vendor-a1aa6816.js";import{B as g,a as m}from"./common-f3387fea.js";function f(n){let a,s,f,y,w,b,v,T,H,M,L,j,C,x,S,$,q,I,z,N,B,R,W,A,J,E,F,K,U,D,G,O,P,Q,V,X,Y,Z,_,nn,an,sn,tn,en,on,pn,cn,ln,rn,un,kn,dn,hn,gn,mn,fn,yn,wn,bn,vn,Tn,Hn,Mn,Ln,jn,Cn,xn,Sn,$n,qn,In,zn,Nn;return a=new g({props:{date:"27 June 2022",title:"Code splitting With Svelte"}}),Cn=new m({props:{src:"https://user-images.githubusercontent.com/10477804/175859805-b4b911cd-3152-4bfb-aeb1-ad22820dc0cc.png"}}),{c(){t(a.$$.fragment),s=e(),f=o("p"),f.innerHTML="Svelte is gaining a lot of traction these days. It is easy to implement and learn. The main reason i have started using Svelte is that it is <b><em>not opinionated</em></b>.\nMostly, I just have to write what actually is required - HTML, CSS and JS and do not worry about the optimizations.",y=e(),w=o("p"),w.innerHTML="But, as the application grows the end users of any application has to pay the price. The hidden cost of downloading mega chunks of JS and CSS resources. We can optimize this via using extra efficient systems and techniques in place e.g. <code>CDN, Browser Cache, Uglify/Minify</code> are a few basic optimizations techniques. As you see, It does not reduce the actual amount of code that is being parsed on the browser.",b=e(),v=o("center"),v.innerHTML='<table><thead><tr><th align="center">Type</th> \n<th align="center">Transferred</th> \n<th align="center">Actual Size</th></tr></thead> \n<tbody><tr><td align="center">js</td> \n<td align="center">39.59 KB</td> \n<td align="center">100.63KB</td></tr></tbody></table>',T=e(),H=o("p"),H.innerHTML="The <em>Actual Size</em> is what the browser has to parse. This in itself is a bottle neck in old/low-end devices. <b>JS is everywhere</b> now and We must optimize the experience for everyone.",M=e(),L=o("blockquote"),L.innerHTML="<p>We can squeeze the air out of a pillow with a vacuum device. Even after that, there is still a piece of mass that requires space in our storage.</p>",j=e(),C=o("p"),C.textContent="We can further reduce the amount of code with help of dynamic imports and keep our application as lean as possible.\nThe idea behind the code splitting is simple - Load only the part of application code which is required to render the particular route the user is visiting.",x=e(),S=o("p"),S.innerHTML="The code splitting of the <b>route resources</b> can further be bifurcated into above the fold and below the fold content (there is no straight way of doing it).",$=e(),q=o("h3"),q.innerHTML='<div align="center">Enough talking, Here is the code!</div>',I=e(),z=o("p"),z.innerHTML="I have a route based application, where each route loads an async <code>Component</code>.",N=e(),B=o("pre"),R=e(),W=o("p"),W.innerHTML="To load the component async and do something while it loads, I did write a util function which handles the loading and returns the default export of the <code>es</code> module.",A=e(),J=o("pre"),E=e(),F=o("p"),F.textContent="The above function is called for each route.",K=e(),U=o("pre"),D=e(),G=o("p"),G.innerHTML="<em>Notice the <code>artilce.component</code> is a function which is evoked when the route is matched.</em>",O=e(),P=o("p"),P.textContent="This is the bare minimum code which is required for creating dynamic chunks during the build processes.",Q=e(),V=o("h4"),V.textContent="Other changes",X=e(),Y=o("ul"),Z=o("li"),_=o("p"),_.innerHTML="<code>rollup.config.js</code>",nn=e(),an=o("pre"),sn=e(),tn=o("p"),tn.innerHTML="<code>format</code> for dynamic chunks is <em>“es”</em> instead of <em>iife</em>. A directory path to save the chunks is provided as <code>dir</code>.",en=e(),on=o("li"),pn=o("p"),pn.innerHTML="<code>index.html</code>",cn=e(),ln=o("pre"),rn=e(),un=o("p"),un.innerHTML="The main chunk has to added as <em>type=“module”</em>",kn=e(),dn=o("h3"),dn.textContent="Final result",hn=e(),gn=o("p"),gn.innerHTML="Chunks are create with <code>chunkName-[hash].js</code>",mn=e(),fn=o("p"),fn.innerHTML='<img src="https://user-images.githubusercontent.com/10477804/175859365-085a3232-d7ed-4b6c-ad97-1bc9f58d9cc6.png" alt="chunks"/>',yn=e(),wn=o("p"),wn.innerHTML="This can be configured with <code>chunkFileNames</code> property in <code>rollup.config.js</code>",bn=e(),vn=o("pre"),Tn=e(),Hn=o("h4"),Hn.textContent="Network requests",Mn=e(),Ln=o("p"),Ln.innerHTML="Inside the <code>index.html</code> we need to add only the the main bundle i.e. <code>thought.js</code> in our case. It has all the information of the chunks that has been created. It loads them in sync to boot the application.",jn=e(),t(Cn.$$.fragment),xn=e(),Sn=o("hr"),$n=e(),qn=o("h4"),qn.textContent="Useful resources",In=e(),zn=o("ul"),zn.innerHTML='<li><a href="https://github.com/Rich-Harris/rollup-svelte-code-splitting" rel="nofollow">Github Repo by Rich Harris</a></li> \n<li><a href="https://hacks.mozilla.org/2015/08/es6-in-depth-modules/" rel="nofollow">ES6 modules</a></li>',p(B,"class","language-js"),p(J,"class","language-js"),p(U,"class","language-svelte"),p(an,"class","language-js"),p(ln,"class","language-html"),p(vn,"class","language-js")},m(n,t){c(a,n,t),i(n,s,t),i(n,f,t),i(n,y,t),i(n,w,t),i(n,b,t),i(n,v,t),i(n,T,t),i(n,H,t),i(n,M,t),i(n,L,t),i(n,j,t),i(n,C,t),i(n,x,t),i(n,S,t),i(n,$,t),i(n,q,t),i(n,I,t),i(n,z,t),i(n,N,t),i(n,B,t),B.innerHTML='<code class="language-js"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">&#123;</span>\n        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/svelte-code-splitting\'</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'Svelte Code splitting\'</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'./markdown/code-splitting-svelte.md\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span></code>',i(n,R,t),i(n,W,t),i(n,A,t),i(n,J,t),J.innerHTML='<code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">getComponent</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n    <span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> module<span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> component<span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',i(n,E,t),i(n,F,t),i(n,K,t),i(n,U,t),U.innerHTML='<code class="language-svelte"><span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">#each</span> <span class="token language-javascript">articles </span><span class="token keyword">as</span> <span class="token language-javascript">article<span class="token punctuation">&#125;</span></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>article<span class="token punctuation">.</span>path<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>\n      <span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">await</span> <span class="token function">getComponent</span><span class="token punctuation">(</span>article<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> then Component<span class="token punctuation">&#125;</span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Component</span> <span class="token punctuation">/></span></span>\n      <span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">await</span><span class="token punctuation">&#125;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Route</span><span class="token punctuation">></span></span>\n<span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">/each</span><span class="token punctuation">&#125;</span></span></code>',i(n,D,t),i(n,G,t),i(n,O,t),i(n,P,t),i(n,Q,t),i(n,V,t),i(n,X,t),i(n,Y,t),l(Y,Z),l(Z,_),l(Z,nn),l(Z,an),an.innerHTML='<code class="language-js">  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n    <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">\'es\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'thoughts\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">dir</span><span class="token operator">:</span> <span class="token string">\'thoughts/dist/js\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#125;</span></code>',l(Z,sn),l(Z,tn),l(Y,en),l(Y,on),l(on,pn),l(on,cn),l(on,ln),ln.innerHTML='<code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/dist/js/thoughts.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>',i(n,rn,t),i(n,un,t),i(n,kn,t),i(n,dn,t),i(n,hn,t),i(n,gn,t),i(n,mn,t),i(n,fn,t),i(n,yn,t),i(n,wn,t),i(n,bn,t),i(n,vn,t),vn.innerHTML='<code class="language-js"><span class="token function-variable function">chunkFileNames</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">chunkInfo</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>chunkInfo<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.js</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code>',i(n,Tn,t),i(n,Hn,t),i(n,Mn,t),i(n,Ln,t),i(n,jn,t),c(Cn,n,t),i(n,xn,t),i(n,Sn,t),i(n,$n,t),i(n,qn,t),i(n,In,t),i(n,zn,t),Nn=!0},p:r,i(n){Nn||(u(a.$$.fragment,n),u(Cn.$$.fragment,n),Nn=!0)},o(n){k(a.$$.fragment,n),k(Cn.$$.fragment,n),Nn=!1},d(n){d(a,n),n&&h(s),n&&h(f),n&&h(y),n&&h(w),n&&h(b),n&&h(v),n&&h(T),n&&h(H),n&&h(M),n&&h(L),n&&h(j),n&&h(C),n&&h(x),n&&h(S),n&&h($),n&&h(q),n&&h(I),n&&h(z),n&&h(N),n&&h(B),n&&h(R),n&&h(W),n&&h(A),n&&h(J),n&&h(E),n&&h(F),n&&h(K),n&&h(U),n&&h(D),n&&h(G),n&&h(O),n&&h(P),n&&h(Q),n&&h(V),n&&h(X),n&&h(Y),n&&h(rn),n&&h(un),n&&h(kn),n&&h(dn),n&&h(hn),n&&h(gn),n&&h(mn),n&&h(fn),n&&h(yn),n&&h(wn),n&&h(bn),n&&h(vn),n&&h(Tn),n&&h(Hn),n&&h(Mn),n&&h(Ln),n&&h(jn),d(Cn,n),n&&h(xn),n&&h(Sn),n&&h($n),n&&h(qn),n&&h(In),n&&h(zn)}}}class y extends n{constructor(n){super(),a(this,n,null,f,s,{})}}export{y as default};
